-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Shared values that are always fresh.
--   
--   Shared values that are always fresh.
@package fresh-var
@version 0.0.0.0


-- | A <a>FreshVar</a> is a shared readable value that always remains
--   fresh. One can be created and read simply by providing a stale check
--   and a create/refresh action.
--   
--   <pre>
--   &gt;&gt;&gt; var &lt;- newFreshVar alwaysFresh onRefreshFalse
--   
--   &gt;&gt;&gt; readFreshVar var
--   True
--   </pre>
--   
--   When a value loses freshness the create/refresh action is run to
--   refresh it.
--   
--   <pre>
--   &gt;&gt;&gt; var &lt;- newFreshVar alwaysStale onRefreshFalse
--   
--   &gt;&gt;&gt; readFreshVar var
--   False
--   </pre>
--   
--   Refreshes can also be preemptively triggered by providing an early
--   warning check. These refreshes happen async and can prevent excessive
--   blocking when values become stale.
--   
--   <pre>
--   &gt;&gt;&gt; import Control.Concurrent (threadDelay)
--   
--   &gt;&gt;&gt; 
--   
--   &gt;&gt;&gt; var &lt;- newPreemptiveFreshVar alwaysFresh alwaysStale onRefreshFalse
--   
--   &gt;&gt;&gt; threadDelay 1
--   
--   &gt;&gt;&gt; readFreshVar var
--   False
--   </pre>
module Control.Concurrent.FreshVar

-- | A value that is always fresh
data FreshVar a

-- | Create a value that will always remain fresh
--   
--   A <a>FreshVar</a> will refresh itself when its stale check returns
--   <a>True</a>. These refreshes are done lazily and occur when a stale
--   value is read via <a>readFreshVar</a>.
newFreshVar :: (a -> Bool) -> (Maybe a -> IO a) -> IO (FreshVar a)

-- | Create a <a>FreshVar</a> that preemptively refreshes itself
--   
--   A <a>FreshVar</a> will block reads when the value becomes stale.
--   However a preemptive <a>FreshVar</a> can refresh itself before the
--   value becomes stale and prevent blocking reads.
newPreemptiveFreshVar :: (a -> Bool) -> (a -> Bool) -> (Maybe a -> IO a) -> IO (FreshVar a)

-- | Read a value and ensure it is always fresh
readFreshVar :: Show a => FreshVar a -> IO a
